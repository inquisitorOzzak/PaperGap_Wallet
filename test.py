from bitmerchant.wallet import *
from cryptos import *


class mnemonic_gen():
    def __init__(self, num):
        self.words = entropy_to_words(os.urandom(num))#generates mnemonic words, num=32 for 24 words, num=16 for 12 words
        self.wallet = Wallet.from_master_secret(self.words)#generates wallet based on the words
        self.priv_key = self.wallet.serialize_b58(private= True)#generates extended private key
        self.pub_key = self.wallet.serialize_b58(private= False)#generates extended public key

    #outputs wallet attributes to user.
    # will need authentication from user like password to access
    def get_wallet(self):
        print("\nThese words are the mnemonic seed from which "
              "the public and private extended keys "
              "are generated \n mnemonic seed: ",self.words)

        print("\nThis extended private key is used to generate "
              "derived addresses and public keys which can "
              "only be accessed by inputting the extended "
              "private key \n Extended private key: ",self.priv_key)

        print("\nThe extended public key is visible by all users and "
              "is derived from the mnemonic seed \nExtended Public Key: ",self.pub_key)

    #derives a variable amount of address/ public key pairs from extended private
    #key. If a user wants to access their wallet they shoul input the private key to
    #generate these addresses, after entering their password.
    #using .txt file as simple implementation
    def gen_derived_address(self,var):
        self.var = var
        file = open("password.txt", "w")
        file.write("These derived addresses can only be generated by inputting the "
              "wallets extended private key. If this is lost they cannot be "
              "regained.\nExtended private key: " + str(self.priv_key)+"\n\n")
        for x in range(var):
            my_wallet_children = self.wallet.deserialize(self.priv_key)
            child = my_wallet_children.get_child(x, is_prime= True, as_private= False)
            file.write("public key " + str(x+1)+":\t"+str(child.serialize(private= False))+"\n")
            file.write("address " + str(x+1)+":\t"+str(child.to_address())+"\n")
            file.write("==========================================================\n")
        file.close()





my_wallet = mnemonic_gen(16)
my_wallet.gen_derived_address(20)
my_wallet.get_wallet()
